import duckdb

def execute_sql_commands():
    # Connect to an in-memory DuckDB database
    conn = duckdb.connect(database=':memory:')

    # SQL commands
    sql_commands = """
    CREATE TABLE APP_MART (
        applicationID BIGINT,
        "Name" VARCHAR,
        applicationState VARCHAR,
        applicationLOB VARCHAR,
        dataIntegrity VARCHAR,
        description VARCHAR,
        investmentStrategy VARCHAR,
        isExternallyMandated BOOLEAN,
        externallyMandatedType VARCHAR,
        isInternalService BOOLEAN,
        isTechnologyMaintained BOOLEAN,
        technologyGroupOwner VARCHAR,
        owningLegalEntity VARCHAR,
        reportingCtoLOB VARCHAR,
        reportingCTOGroup VARCHAR,
        technologyGroupOwnerID VARCHAR,
        usingLobSubLobs VARCHAR,
        applicationOwnerSID VARCHAR,
        applicationOwnerName VARCHAR,
        chiefTechnologyOfficerSID VARCHAR,
        chiefTechnologyOfficerName VARCHAR,
        informationOwnerSID VARCHAR,
        informationOwnerName VARCHAR,
        plannedBuildStartDate DATE,
        plannedOperateDate DATE,
        plannedDecommissionDate DATE,
        plannedDecommissionDateChangeReason VARCHAR,
        plannedRetirementDate DATE,
        actualBuildStartDate DATE,
        actualOperateDate DATE,
        actualDecommissionDate DATE,
        actualRetirementDate DATE,
        replacedByApplicationIDs VARCHAR,
        replacementApplicationType VARCHAR,
        retirementType VARCHAR,
        accessControlExternalVendorName VARCHAR,
        applicationDevelopmentResponsibility VARCHAR,
        applicationDevelopmentVendorName VARCHAR,
        hasExternalAccessControl BOOLEAN,
        applicationDevelopmentRetirementDate DATE,
        hasFirmOwnedSourceCode BOOLEAN,
        hasHardwareDeployments BOOLEAN,
        hasSoftwareDeployments BOOLEAN,
        hasThirdPartyDirectAccess BOOLEAN,
        hasVendorEngagements BOOLEAN,
        developmentApplicationOnly BOOLEAN,
        internallyShared BOOLEAN,
        sourceCodeVendorName VARCHAR,
        thirdPartyDirectAccessVendorName VARCHAR,
        hasCPOFLogicalDeployment BOOLEAN,
        hasHVBE BOOLEAN,
        hasIMPDeployment BOOLEAN,
        hasPersonalInformation BOOLEAN,
        hasClientConfidentialInformation BOOLEAN,
        hasSensitivePersonalInformation BOOLEAN,
        hasPHI BOOLEAN,
        hasMNPI BOOLEAN,
        informationClassification VARCHAR,
        isCCARReportable BOOLEAN,
        isGLBAReportable BOOLEAN,
        isPCIReportable BOOLEAN,
        paymentCardIndustryCategory VARCHAR,
        isSOC1Reportable BOOLEAN,
        isSOXReportable BOOLEAN,
        hasGlobalStatutoryAudit BOOLEAN,
        overallRiskRating VARCHAR,
        strictestRPO VARCHAR,
        strictestRTO VARCHAR,
        eligibleForInstantChangeAuthorization BOOLEAN,
        creationDate DATE,
        authenticationType VARCHAR,
        coarseGrainAuthorizationType VARCHAR,
        fineGrainAuthorizationType VARCHAR,
        hasExternalNetworkConnectivity BOOLEAN,
        notExternalFacingReason VARCHAR,
        hasDeploymentsWithExternalNetworkExposure BOOLEAN,
        hasDeploymentsWithTier0_1Or2NetworkAssets BOOLEAN,
        hasExternalAPIConnectivity BOOLEAN,
        hostingVendor VARCHAR,
        overallHostingType VARCHAR,
        platforms VARCHAR,
        "knownApplicationProductionPlatforms(KAPP)" VARCHAR,
        providesPlatforms VARCHAR,
        programmingLanguages VARCHAR,
        certificationStatus VARCHAR,
        lastCertifiedBySID VARCHAR,
        lastCertificationDate DATE,
        justificationText VARCHAR,
        justificationType VARCHAR,
        otherConsideredApplicationIDs VARCHAR,
        toBeDecommissionedApplicationIDs VARCHAR,
        criticalOperationIDs VARCHAR,
        criticalOperationNames VARCHAR,
        retentionClassCodes VARCHAR,
        technologyCapabilitiesOnly BOOLEAN,
        "applicationSub-types" VARCHAR,
        isPlatformApplication BOOLEAN
    );

    CREATE TABLE CLEANED_SPEND (
        chargeApplicationID BIGINT,
        ppgProduct VARCHAR,
        pricePerUnit DOUBLE,
        pricingUnit VARCHAR,
        dcRegion VARCHAR,
        assetEnvironment VARCHAR,
        "month" INTEGER,
        "year" BIGINT,
        amount DOUBLE,
        "Exclude" VARCHAR
    );

    CREATE TABLE TEMP_FINANCE_MART_2023 (
        "Charged Application ID" BIGINT,
        SCE BIGINT,
        CBT VARCHAR,
        Segmentation VARCHAR,
        "CAO Level 1" VARCHAR,
        Hostname VARCHAR,
        "CAO Level 2" VARCHAR,
        "CAO Level 3" VARCHAR,
        "CAO Level 4" VARCHAR,
        "CAO Level 5" VARCHAR,
        "CAO Level 6" VARCHAR,
        "CAO Level 7" VARCHAR,
        "Cost Centre Name" VARCHAR,
        "Inventory" VARCHAR,
        "PPG L1" VARCHAR,
        "PPG L2" VARCHAR,
        "PPG L3" VARCHAR,
        "PPG L4" VARCHAR,
        "PPG Location" VARCHAR,
        "PPG Product" VARCHAR,
        "Price Per Unit" DOUBLE,
        "Pricing Unit" VARCHAR,
        "DC Country" VARCHAR,
        "DC Name" VARCHAR,
        "DC Region" VARCHAR,
        "Asset Decom Date" VARCHAR,
        "Asset Environment" VARCHAR,
        "Asset Lifecycle Status" VARCHAR,
        "Asset Operating System" VARCHAR,
        "Asset OSI ID" VARCHAR,
        "Asset Hardware Model" VARCHAR,
        "Data Centre" VARCHAR,
        "03 Actuals/Baseline $ January 2023" VARCHAR,
        "03 Actuals/Baseline $ February 2023" VARCHAR,
        "03 Actuals/Baseline $ March 2023" VARCHAR,
        "03 Actuals/Baseline $ April 2023" VARCHAR,
        "03 Actuals/Baseline $ May 2023" VARCHAR,
        "03 Actuals/Baseline $ June 2023" VARCHAR,
        "03 Actuals/Baseline $ July 2023" VARCHAR,
        "03 Actuals/Baseline $ August 2023" VARCHAR,
        "03 Actuals/Baseline $ September 2023" VARCHAR,
        "03 Actuals/Baseline $ October 2023" VARCHAR,
        "03 Actuals/Baseline $ November 2023" VARCHAR,
        "03 Actuals/Baseline $ December 2023" VARCHAR,
        "03 Actuals/Baseline Total" VARCHAR,
        "year" INTEGER
    );

    CREATE OR REPLACE TABLE RAW_CLOUD_VISION (
        "Monthly Timestamp" TIMESTAMP,
        "App Seal Id" BIGINT,
        "App Name" VARCHAR,
        "Sce" BIGINT,
        "Product Name" VARCHAR,
        "Unit" VARCHAR,
        "Usage Category" VARCHAR,
        "Gross Cost" DOUBLE,
        "Volume" DOUBLE,
        "Memory Volume" DOUBLE,
        "vCPU Volume" DOUBLE
    );

    CREATE TABLE SPEED_OVER_STORAGE (
        chargeApplicationID BIGINT,
        ppgProduct VARCHAR,
        "month" INTEGER,
        "year" BIGINT,
        pricingUnit VARCHAR,
        originalPricingUnit VARCHAR,
        "Exclude" VARCHAR,
        storageAmount DOUBLE,
        amount DOUBLE
    );

    CREATE OR REPLACE TABLE TEMP_FINANCE_MART_2024 (
        "Charged Application ID" BIGINT,
        "SCE" BIGINT,
        "CBT" VARCHAR,
        "Segmentation" VARCHAR,
        "CAO Level 1" VARCHAR,
        "Hostname" VARCHAR,
        "CAO Level 2" VARCHAR,
        "CAO Level 3" VARCHAR,
        "CAO Level 4" VARCHAR,
        "CAO Level 5" VARCHAR,
        "CAO Level 6" VARCHAR,
        "CAO Level 7" VARCHAR,
        "Cost Centre Name" VARCHAR,
        "Inventory" VARCHAR,
        "PPG L1" VARCHAR,
        "PPG L2" VARCHAR,
        "PPG L3" VARCHAR,
        "PPG L4" VARCHAR,
        "PPG Location" VARCHAR,
        "PPG Product" VARCHAR,
        "Price Per Unit" DOUBLE,
        "Pricing Unit" VARCHAR,
        "DC Country" VARCHAR,
        "DC Name" VARCHAR,
        "DC Region" VARCHAR,
        "Asset Decom Date" VARCHAR,
        "Asset Environment" VARCHAR,
        "Asset Lifecycle Status" VARCHAR,
        "Asset Operating System" VARCHAR,
        "Asset OSI ID" VARCHAR,
        "Asset Hardware Model" VARCHAR,
        "Data Centre" VARCHAR,
        "03 Actuals/Baseline $ January 2024" VARCHAR,
        "03 Actuals/Baseline $ February 2024" VARCHAR,
        "03 Actuals/Baseline $ March 2024" VARCHAR,
        "03 Actuals/Baseline $ April 2024" VARCHAR,
        "03 Actuals/Baseline $ May 2024" VARCHAR,
        "03 Actuals/Baseline $ June 2024" VARCHAR,
        "03 Actuals/Baseline $ July 2024" VARCHAR,
        "03 Actuals/Baseline $ August 2024" VARCHAR,
        "03 Actuals/Baseline $ September 2024" VARCHAR,
        "03 Actuals/Baseline $ October 2024" VARCHAR,
        "03 Actuals/Baseline $ November 2024" VARCHAR,
        "03 Actuals/Baseline $ December 2024" VARCHAR,
        "03 Actuals/Baseline Total" VARCHAR,
        "year" INTEGER
    );

    CREATE OR REPLACE TABLE RAW_SEAL (
        "Application ID" BIGINT,
        "Name" VARCHAR,
        "Application State" VARCHAR,
        "Application LOB" VARCHAR,
        "Application Short Name" VARCHAR,
        "Data Integrity" VARCHAR,
        "Description" VARCHAR,
        "Investment Strategy" VARCHAR,
        "Is Externally Mandated" BOOLEAN,
        "Externally Mandated Type" VARCHAR,
        "Is External Service" BOOLEAN,
        "Is Technology Maintained" BOOLEAN,
        "Technology Group Owner" VARCHAR,
        "Owning Legal Entity" VARCHAR,
        "Reporting CTO LOB" VARCHAR,
        "Reporting CTO Group" VARCHAR,
        "Technology Group Owner ID" VARCHAR,
        "Using LOB/Sub LOBs" VARCHAR,
        "Application Owner SID" VARCHAR,
        "Application Owner Name" VARCHAR,
        "Chief Technology Officer SID" VARCHAR,
        "Chief Technology Officer Name" VARCHAR,
        "Information Owner SID" VARCHAR,
        "Information Owner Name" VARCHAR,
        "Planned Build Start Date" DATE,
        "Planned Operate Date" DATE,
        "Planned Decommission Date" DATE,
        "Planned Decommission Change Reason" VARCHAR,
        "Planned Retirement Date" DATE,
        "Actual Build Start Date" DATE,
        "Actual Operate Date" DATE,
        "Actual Decommission Date" DATE,
        "Actual Retirement Date" DATE,
        "Replaced By Application IDs" VARCHAR,
        "Replacement Application Type" VARCHAR,
        "Retirement Type" VARCHAR,
        "Access Control External Vendor Name" VARCHAR,
        "Application Development Responsibility" VARCHAR,
        "Application Development Vendor Name" VARCHAR,
        "Has External Access Control" BOOLEAN,
        "Has Firm Owned Source Code" BOOLEAN,
        "Has Hardware Deployments" BOOLEAN,
        "Has Software Deployments" BOOLEAN,
        "Has Third Party Direct Access" BOOLEAN,
        "Has Vendor Engagements" BOOLEAN,
        "Development Application Only" BOOLEAN,
        "Internally Shared" BOOLEAN,
        "Source Code Vendor Name" VARCHAR,
        "Third Party Direct Access Vendor Name" VARCHAR,
        "Has CPOF logical Deployment" BOOLEAN,
        "Has HVBE" BOOLEAN,
        "Has IMP Deployment" BOOLEAN,
        "Has Personal Information" BOOLEAN,
        "Has Client Confidential Information" BOOLEAN,
        "Has Sensitive Personal Information" BOOLEAN,
        "Has PHI" BOOLEAN,
        "Has MNPI" BOOLEAN,
        "Information Classification" VARCHAR,
        "Is CCAR Reportable" BOOLEAN,
        "Is GLBA Reportable" BOOLEAN,
        "Is PCI Reportable" BOOLEAN,
        "Payment Card Industry Category" VARCHAR,
        "Is SOC1 Reportable" BOOLEAN,
        "Is SOX Reportable" BOOLEAN,
        "Has Global Statutory Audit" BOOLEAN,
        "Overall Risk Rating" VARCHAR,
        "Strictest RPO" VARCHAR,
        "Strictest RTO" VARCHAR,
        "Eligible for Instant Change Authorization" BOOLEAN,
        "Creation Date" DATE,
        "Authentication Type" VARCHAR,
        "Coarse Grain Authorization Type" VARCHAR,
        "Fine Grain Authorization Type" VARCHAR,
        "Has External Network connectivity" BOOLEAN,
        "Not External Facing Reason" VARCHAR,
        "Has Deployments with External Network Exposure" BOOLEAN,
        "Has Deployments With Tier 0, 1 or 2 Network Assets" BOOLEAN,
        "Has External API Connectivity" BOOLEAN,
        "Hosting Vendor" VARCHAR,
        "Overall Hosting Type" VARCHAR,
        "Platforms" VARCHAR,
        "Known Application Production Platforms (KAPP)" VARCHAR,
        "Provides Platforms" VARCHAR,
        "Programming Languages" VARCHAR,
        "Certification Status" VARCHAR,
        "Last Certified By SID" VARCHAR,
        "Last Certification Date" DATE,
        "Justification Text" VARCHAR,
        "Justification Type" VARCHAR,
        "Other Considered Application IDs" VARCHAR,
        "To Be Decommissioned Application IDs" VARCHAR,
        "Critical Operation IDs" VARCHAR,
        "Critical Operation Names" VARCHAR,
        "Retention Class Codes" VARCHAR,
        "Technology Capabilities Only" BOOLEAN,
        "Application Sub-Types" VARCHAR,
        "Is Platform Application" BOOLEAN
    );
    """

    # Execute the SQL commands
    conn.execute(sql_commands)
    print("SQL commands executed successfully.")

if __name__ == "__main__":
    execute_sql_commands()